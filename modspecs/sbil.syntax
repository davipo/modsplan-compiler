# sbil.syntax
# Stack-Based Intermediate Language
# Based on LLVM


use constants   # constant, number, STRING, INTEGER, FLOAT, HEX
use irtypes     # intermediate representation types


module.root => definition*

definition => NEWLINE               # handles comment lines
definition => globalvar NEWLINE
definition => typedef NEWLINE
definition => funcdecl NEWLINE      # external or forward declaration
definition => funcdef NEWLINE


globalvar => 'var' elementtype name                # (module level) makes a global variable
globalvar => 'var' elementtype name '=' constant   #   with initializer


name => IDENTIFIER


typedef => 'type' TYPEID '=' type           # any type except void


funcdecl => 'declare' returntype name paramtypes    # external (or forward?) function
paramtypes => '(' argtype,*  ellipsis? ')'

funcdef => 'func' returntype name params funcbody

params => '(' param,*  ellipsis? ')'
param => argtype name


funcbody => '{' NEWLINE entryblock block* '}'

entryblock => INDENT instruction* terminator DEDENT         # no label

block => label ':' NEWLINE INDENT instruction* terminator DEDENT

label => IDENTIFIER

terminator => branch NEWLINE
terminator => return NEWLINE

branch => 'br' label ',' label      # pop value, go to 1st label if true, 2nd if false
branch => 'br' label

return => 'ret'         # 0 or 1 value left on stack, according to returntype;
                        #   check that type matches.


instruction => vardecl NEWLINE
instruction => constval NEWLINE

instruction => load NEWLINE
instruction => loadi NEWLINE
instruction => store NEWLINE
instruction => storei NEWLINE

instruction => cmp NEWLINE
instruction => call NEWLINE
instruction => STACKOP NEWLINE
instruction => BINOP NEWLINE            # binary operation: pop 2 values, push result

vardecl => 'var' elementtype name                   # (inside function) generates alloca
vardecl => 'var' elementtype name '=' constant      #   with initializer

constval => 'const' constant        # integer, float, string (pushed on stack)

load => 'load' variable
loadi => 'loadi' variable           # load variable indexed by stack top (replaced)

store => 'store' variable           # (pops top value from stack)
storei => 'storei' variable         # store stack(1) at index stack(0), pop both

cmp => 'cmp' CONDITION              # pop 2 values, compare them, push boolean result

call => 'call' variable INTEGER     # INTEGER gives number of args on stack

variable => name

