# sbil.defn
# Stack-Based Intermediate Language


use constants   # constant, number


globalvar(type name)
    .addvar(name, type)
    .concat('@', name) '=' type

globalvar(type name constant)
    .addvar(name, type)
    .concat('@', name) '=' type constant


typedef(TYPEID type)
    TYPEID '= type' type



paramtypes(type,*  ellipsis?)
    '(' .commasep(type*) ellipsis? ')'

ellipsis()
    ',' '...'

funcdecl(rettype name paramtypes)

funcdef(rettype name params funcbody)
rettype(type)

params(param,*  ellipsis?)
    '(' .commasep(param*) ellipsis? ')'


funcbody(entryblock block* )

entryblock(instruction+ terminator)

block(label instruction* terminator)

label(identifier)

terminator(branch)

terminator(return)


branch(label label)
branch(label)


instruction(directive)
instruction(vardecl)
instruction(load)
instruction(store)
instruction(cmp)
instruction(call)
instruction(pop)
instruction(BINOP)

directive(identifier  value,* )

vardecl(type name)

value(directive)
value(variable)

variable(name)
variable(name subscript)

subscript(value)
vardecl(type name constant)


load(variable)
store(variable)
cmp(CONDITION)
call(name integer)
pop()

