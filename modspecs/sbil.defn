# sbil.defn
# Stack-Based Intermediate Language


use constants   # constant, number


globalvar(elementtype name)
    .addvar(name, elementtype)
    .concat('@', name) '=' elementtype

globalvar(elementtype name constant)
    .addvar(name, elementtype)
    .concat('@', name) '=' elementtype constant


typedef(TYPEID type)
    TYPEID '= type' type


funcdecl(returntype name paramtypes)
    .addvar(name, returntype)
    'declare' .var(name) paramtypes

paramtypes(argtype*  ellipsis?)
    '(' .commasep(argtype*) ellipsis? ')'

ellipsis()
    ',' '...'


funcdef(returntype name params funcbody)
    .addvar(name, returntype)
    .enterscope(name)
    'define' .var(name) params '{'
    .indent()
    &funcbody
    .dedent()
    .exitscope(name)

params(param* ellipsis?)
    '(' .commasep(param*) ellipsis? ')'


entryblock(instruction* terminator)
    &instruction*
    &terminator

block(label instruction* terminator)
    label ':'
    =entryblock(instruction* terminator)


terminator(return)
    'ret' .top()
    ## Should functions always return a value, to be ignored when return type is void?
    

branch(label label)
    ## If type on stack top is not i1, may need to convert, or give error.
    .br() .top() ', label' .unique(label) ', label' .unique(label)
##     'br' recognized as BR, can't use

branch(label)
    .br() 'label' .unique(label)


vardecl(elementtype name)
    .addvar(name, elementtype)
    .concat('%', name) '=' 'alloca' elementtype

vardecl(elementtype name constant)
    =vardecl(elementtype name)
    'store' constant ',' .var(name)


constval(constant)
    .push(constant)         # push puts type and value on stack


load(variable)
    .load(variable) '=' 'load' variable
    # .load() returns unique 'load' value, pushes it prefixed with dereferenced type

loadi(variable)
    # load variable indexed by stack top (replaced)
    # .top() must be inttype, must be const if variable is struct
    .unique('tmp') '= getelementptr inbounds' variable 'i32 0,' .top()
    '.loadi...??'

store(variable)
    'store' .top() ',' variable

storei(variable)
    .unique('tmp') '= getelementptr inbounds' variable 'i32 0,' .top()
    .push('above with dereferenced type')
    # store stack(1) at index stack(0), pop both
    'store' .top() ',' .top()


cmp(CONDITION)
    .cmp(CONDITION)
    # checks that top 2 values on stack have same type,
    #   returns icmp or fcmp instruction with appropriate condition,
    #   assigning to a unique name, and pushes name prefixed with 'i1' on stack.


call(variable INTEGER)
    .call(variable) '=' 'call' variable '(' .fnargs(INTEGER) ')'
    # .call() returns unique 'call' value, pushes it prefixed with defunced return type


instruction(BINOP)
    .ssa(BINOP)         # generate static single assignment
    # checks that top 2 values on stack have same type, 
    #   returns appropriate ssa instruction, 
    #   assigning to unique BINOP name, pushes it prefixed with type.
    

STACKOP('pop')
    .pop()              # discard value on top of stack

STACKOP('dup')
    .dup()              # duplicate: push a copy of stack top value on stack


variable(name)
    .var(name)          # pointer type and pointer to variable
    ## if name is a varargs function, also need function signature type

