# L0.defn

use base
use expr


globalvar(TYPE identifier)
    'var' TYPE identifier

globalvar(TYPE identifier constant)
    'var' TYPE identifier '=' constant


extfunc(TYPE identifier)        # external function (for I/O, etc.)
    'declare' TYPE identifier '(' ')'


vardecl(TYPE identifier)        # (inside a function)
    'var' TYPE identifier

vardecl(TYPE identifier constant)
    'var' TYPE identifier '=' constant


statement(call)
    &call
    'pop'       # discard result


funcdef(VOID identifier params suite)
    'func' VOID identifier params '{'
    .indent()
    &suite
    'ret'
    .dedent()
    '}'

funcdef(TYPE identifier params suite)
    'func' TYPE identifier params '{'
    .indent()
    &suite
    ## check for appropriate return statement?
    .dedent()
    '}'


return(test?)
    .returncheck()          # test must be empty only if func TYPE is void
    &test?
    'ret'


params(identifier*)
    '(' .commasep(identifier*) ')'      # separate with commas


assignment(designator test)
    &test
    'store' designator

assignment(designator ASSIGN_OP test)
    'load' designator
    &test
    ASSIGN_OP
    'store' .again(designator)


# MUL_OP('/')     # override base.defn, which implements truncated division
# 
# 
# MUL_OP('%')     # override base.defn, which implements remainder
# 


TYPE('int')
    'i32'
