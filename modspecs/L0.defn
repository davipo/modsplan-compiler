# Modsplan base.defn

# This is the base definition for most programming languages.
# It specifies code generation from an abstract syntax tree (AST).

# See defn.metagrammar for syntax of .defn files


##  Specify only nonterms which generate code
##      Compiler traverses tree depth-first, matching these, generating as it goes.


declaration(attributes variable)
    # provides for external functions (for I/O, etc.) and variables
    .addsymbol(variable, attributes)


assignment(designator ASSIGN test)
    &designator
    &test
    &ASSIGN
    
ASSIGN('=')
    store
    
ASSIGN('+=')
    add 'in place'


if(test suite)
    &test
    branch iftrue, iffalse
    iftrue:
        &suite
    iffalse:


if(test suite suite)
    &test
    branch iftrue, iffalse
    iftrue:
        &suite
        jump ifend
    iffalse:
        &suite
    ifend:



while(test suite)
    while:
        &test
        branch iftrue, iffalse
        iftrue:
            &suite
            jump while
        iffalse:


designator(variable)
    .addsymbol(variable, 'local')
    &variable
    constant 0
    getptr


variable()
    vget NAME


# When sequences added:
# subscript(variable_seq expr_int)
#   &variable_seq
#   &expr_int
#   getptr


comparison(RELATION expr)
    &expr
    &RELATION

RELATION('==')
    cmp eq

RELATION('!=')
    cmp ne

RELATION('>')
    cmp gt

RELATION('>=')
    cmp ge

RELATION('<')
    cmp lt

RELATION('<=')
    cmp le


addition(ADD_OP term)
    &term
    &ADD_OP

ADD_OP('+')
    add
    
ADD_OP('-')
    sub


call(variable arglist)      # function call
    &arglist
    &variable
    call

parentheses(test)
    &test

# just "variable" instead of "atom(variable)"?
atom(variable)
    &variable
    constant 0
    getptr
    load


identifier(NAME)
    .getsymbol(NAME)        # compile error if NAME undefined
    

number(INTEGER)
    const INTEGER
