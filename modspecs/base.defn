# Modsplan base.defn

# This is the base definition for most programming languages.
# It specifies code generation from an abstract syntax tree (AST).

# See defn.metagrammar for syntax of .defn files

# Specify only nonterms which generate code
# Compiler traverses tree depth-first, matching these, generating as it goes.


if(test suite else?)
    &test
    'br' iftrue, iffalse
    iftrue:
        &suite
        'br' ifend
    iffalse:
        &else?
    ifend:


while(test suite)
    'br' while          # (terminate previous block)
    while:
        &test
        'br' whiletrue, whileend
    whiletrue:
        .continuebreak(while, whileend)
        &suite
        'br' while
    whileend:


compare(RELATION expr)
    &expr
    RELATION

RELATION('==')
    'cmp eq'

RELATION('!=')
    'cmp ne'

RELATION('>')
    'cmp gt'

RELATION('>=')
    'cmp ge'

RELATION('<')
    'cmp lt'

RELATION('<=')
    'cmp le'


factor(ADD_OP atom)     # handles unary '-' (and '+')
    'const 0'
    &atom
    ADD_OP


addition(ADD_OP term)
    &term
    ADD_OP

ADD_OP('+')
    'add'
    
ADD_OP('-')
    'sub'


multiplication(MUL_OP factor)
    &factor
    MUL_OP

MUL_OP('*')
    'mul'


call(variable arg*)     # function call
    &arg*
    'call' variable .count(arg*)     # number of args


atom(variable)          ## "variable" instead of "atom(variable)"?
    'load' variable

atom(constant)
    'const' constant


identifier(NAME)
    .again(NAME)        # reuse indefinitely

