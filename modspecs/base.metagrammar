# base.metagrammar
# Base syntax for Modsplan grammars

# This is also the metagrammar for itself!
# Space character may appear only where shown or noted; extra spaces ignored.

# Modsplan grammar is a BNF variant.
#
# Items of a production may be a literal (in quotes) or a lowercase nonterminal.
# 
# Items may be suffixed with a quantifier character to indicate repetition: 
#   '*' = 0 or more, '+' = 1 or more, '?' = 0 or 1.
#
# A separator character (usually ',') may occur immediately before a quantifier.
#   This indicates that repetitions are separated by that character.
#
# Alternates must be spelled out with a separate production.
#   This is a reminder that additional alternates may appear in other files.
#
# In token specifications (and metagrammars), an item may be a character class,
#   represented by a single uppercase letter:
#       U = any upper case letter
#       L = any lower case letter
#       D = any digit
#       P* = any printable characters, must be followed by terminal or end of line.
#           P must be used with the '*'. Printable character may be a space.
# 
# In syntax specifications, an item may be a tokenkind, represented by a word of
#   two or more uppercase letters. These are defined in a token specification.


grammar => line*

line => statement? comment? '\n'     # '\n' represents a newline (end-of-line marker)

comment => "#" P*           # if not at start of line, must be preceded by a space

statement => enable
statement => import
statement => production

enable => 'enable' option
option => identifier

identifier => L+

import => 'use' filename,+      # one or more filenames, separated by ", "
filename => identifier          # no extension, assumes same extension as current file


production => nonterminal flag* '=>' alternate

nonterminal => nonterm      # "nonterminal" on left side only; "nonterm" may be on right
                            #   (nonterminal is extended in tokens.metagrammar)

nonterm => identifier

flag => '.' identifier      # no spaces between nonterminal and flags

alternate => word+          # spaces must separate adjacent words

word => item repeater?              # no space between item and repeater

repeater => separator? quantifier   # no space between separator and quantifier

separator => ','            # will separate repeated items (space must follow each)
separator => '.'
separator => ';'
separator => ':'
separator => '/'
separator => '|'
separator => '\'
separator => '&'
separator => '-'
separator => '='

quantifier => '*'           # zero or more
quantifier => '+'           # one or more
quantifier => '?'           # zero or one

item => nonterm 
item => literal             # terminal

literal => '"' P* '"'
literal => "'" P* "'"

# charclass is permitted only in .tokens spec; here only because needed by metagrammars
item => charclass           # terminal

charclass => U
