# c1.defn

use base


typedef(typespecifier declarator)
    'type' &declarator '=' &typespecifier


globalvardeclaration(typespecifier identifier initializer?)
    'var' &typespecifier &identifier &initializer?

initializer(literal)
    '=' &literal


## funcdeclaration(typespecifier identifier functiondeclarator)


funcdefinition(typespecifier identifier functiondeclarator compoundstatement)
    func &typespecifier &identifier &functiondeclarator {
        &compoundstatement
    }


# local declaration inside a function
declaration(typespecifier identifier initializer?)
    'var' &typespecifier &identifier &initializer?


    
assignexpr(lvalue expression)
    &expression
    'store' &lvalue


for(declaration expression? expression? statement)
    &declaration
    =for(expression? expression? statement)

for(expression? expression? expression? statement)
    &expression?
    =for(expression? expression? statement)

for(expression? expression? statement)
    for:
        &expression?            # condition
        br forbegin, forend
        forbegin:
            &statement
            &expression?        # next
            br for
        forend:


atom(INC_OP variable)   # increment/decrement before use
    &variable               # get address
    .load(variable)         # put value on stack
    const 1
    &INC_OP                 # add or subtract
    store                   # removes address, leaves value on stack

atom(variable INC_OP)   # increment/decrement after use
    .load(variable)         # put value on stack
    =atom(INC_OP variable)
    pop                     # remove top of stack
    
INC_OP('++')
    add

INC_OP('--')
    sub

