# c1.defn

use base


globalvardeclaration(typespecifier initdeclarator,+)


funcdeclaration(typespecifier identifier functiondeclarator)


funcdef(typespecifier identifier functiondeclarator compoundstatement)


# declaration(declspecifier initdeclarator+)
#     &declspecifier &initdeclarator+

# initdeclarator(declarator constantexpr)
#     &declarator
#     &constantexpr
#     store
    
assignexpr(lvalue ASSIGN expression)
    &lvalue
    &expression
    &ASSIGN

## for(declaration expression? expression? statement)
##    &declaration

for(expression? expression? expression? statement)
    &expression?
    for:
        &expression?            # condition
        br forbegin, forend
        forbegin:
            &statement
            &expression?        # next
            br for
        forend:


atom(INC_OP variable)   # increment/decrement before use
    &variable               # get address
    .load(variable)         # put value on stack
    const 1
    &INC_OP                 # add or subtract
    store                   # removes address, leaves value on stack

atom(variable INC_OP)   # increment/decrement after use
    .load(variable)         # put value on stack
    =atom(INC_OP variable)
    pop                     # remove top of stack
    
INC_OP('++')
    add

INC_OP('--')
    sub

