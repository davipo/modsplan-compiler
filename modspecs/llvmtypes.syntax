# llvmtypes.syntax
# LLVM types categorized


type => primitivetype
type => derivedtype
type => TYPEID                  # named type (alias)

primitivetype => numerictype
primitivetype => labeltype
primitivetype => voidtype       # not firstclass
primitivetype => metadatatype   # not used in derived types except as function argument

numerictype => INTTYPE          # iN, N = integer (see irtypes.tokens)
numerictype => FLOATTYPE

labeltype => 'label'
voidtype => 'void'
metadatatype => 'metadata'      # not used in derived types except as function argument


derivedtype => pointertype
derivedtype => vectortype
derivedtype => aggregatetype
derivedtype => functype         # not firstclass
derivedtype => opaquetype       # not firstclass (referenced only in structure type?)


# Firstclass types can be produced by instructions.
# They include: numeric, label, metadata, pointer, vector, and aggregate types.


pointertype => pointabletype '*'        # (use i8* for label pointer)

# Pointable types include all but void, label, metadata, opaque
pointabletype => numerictype
pointabletype => pointertype        # (recursive parsing problem)
pointabletype => vectortype
pointabletype => aggregatetype
pointabletype => functype           # (recursive parsing problem)


vectortype => '<' INTEGER 'x' vectorelementtype '>'      
    # for parallel processing, not an aggregate type
    #   type must be int, float or pointer to those
    #   size must be > 0

vectorelementtype => numerictype '*'?


aggregatetype => arraytype
aggregatetype => structtype
aggregatetype => packedstructtype

arraytype => '[' INTEGER 'x' elementtype ']'

structtype => '{' elementtype,* '}'

packedstructtype => '<{' elementtype,* '}>'

# Element type of aggregates "may be any type with a size".
elementtype => pointabletype        # include functype?


functype => returntype '(' argtype,*  ellipsis? ')'

# Function return type must be firstclass or void.
#   Not label? functype? LangRef unclear.
# Unclear what are valid argument types.

returntype => pointabletype
returntype => voidtype

argtype => pointabletype
argtype => labeltype            # permitted?
argtype => metadatatype

ellipsis => ',' '...'       # indicates a variable number of args


opaquetype => 'opaque'
