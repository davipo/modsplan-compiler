# C0.syntax
# C0 language syntax
# A minimal subset of C

use expr        # common expression syntax


program.root => extdecl+

## extdecl => funcdef
extdecl => statement        ## until we implement functions

extdecl => declaration

declaration => declspecifier+ initdeclarator,* ';'

declspecifier => STORAGESPEC
declspecifier => TYPESPECIFIER
declspecifier => TYPEQUALIFIER

# initdeclarator => declarator '=' initializer
initdeclarator => declarator

declarator => pointr* directdeclarator

pointr => '*' TYPEQUALIFIER*

directdeclarator => identifier followdeclarator*
directdeclarator => '(' declarator ')' followdeclarator*

followdeclarator => identifier
followdeclarator => '(' declarator ')'
followdeclarator => arraydeclarator
followdeclarator => functiondeclarator

arraydeclarator => arrayincomplete
arraydeclarator => arrayvarlen
arraydeclarator => '[' STORAGESPEC? TYPEQUALIFIER* assignexpr ']'
    # STORAGESPEC here may be only 'static'

arrayincomplete => '[' TYPEQUALIFIER* ']'
arrayvarlen => '[' TYPEQUALIFIER*  '*'  ']'

# functiondeclarator => '(' identifier,* ')'
    # separated param declarations may be too hard to compile
    
functiondeclarator => '(' paramdeclaration,* ellipsis? ')'

ellipsis => ','  '...'

paramdeclaration => declspecifier+ declarator
    # require a declarator
# paramdeclaration => declspecifier+ declarator?
# paramdeclaration => declspecifier+ abstractdeclarator

# funcdef => declspecifier+ declarator declaration* compoundstatement
    # As specified in C11, but has many constraints not in syntax

funcdef => declspecifier+ identifier functiondeclarator compoundstatement

compoundstatement => '{' blockitem* '}'
blockitem => declaration
blockitem => statement

statement => if
statement => while
statement => compoundstatement
statement => expression? ';'

if => 'if' '(' test ')' suite else?
else => 'else' suite

while => 'while' '(' test ')' suite

suite => statement

expression => assignexpr
expression => test      # test specified in expr.syntax

assignexpr => designator ASSIGN expression

designator => variable

