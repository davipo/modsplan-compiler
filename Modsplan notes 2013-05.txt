Modsplan notes 2013-05


2013-05-01

Been busy with LED art proposal and img2track knitting machine software.

Defn language

    Looks like I will need to revise the Defn language to generate SBIL and LLVM code.
        It will have a more flexible instruction format, probably simpler, too!

    Been considering allowing nested signatures; might not be hard to implement.


2013-05-02

    Should defn language use quoted strings for literal items?
        Then nonterms and terminals don't need '&' prefix.
        Quoting literals is consistent with syntax specs.


2013-05-03

    Use .error(message) directive to report unsupported features of source language.  ###

    Been worrying about how to distinguish child expansion from substitution of its text.
        I think this is just about when to generate multiple lines of code,
            rather than composing pieces of a single line.
        Thought it might work to expand only when child is the only word on a line.
        But I'm doubting that, finding this very confusing.
            Guess I'll have to sort it out as I implement it.
        If needed, we can use the '&' prefix to signal expansion.


New indenting scheme for SBIL (and LLVM):
    Like LLVM examples I've seen, indent function bodies, except for labels.
        Does LLVM use nested functions? Don't need them now.
    Where handle this in code?
        Could be done after generation, maybe better to keep formatting in one place.
    Rules:
        If line ends with '{', increase indent level.
        If line ends with '}', decrease indent level.
        If line ends with ':', decrease indent just for that line.
        Does a comment at the end of these lines cause a problem?  ###
    

2013-05-06

Progress on expansion/substitution; but not quite clear when expansion needed.  ###

Decided to output terminals directly, no error if they don't appear in defn spec.
    Saves writing a lot of redundant definitions.

Literals in defn specs will be single-quoted. These are output literally (without quotes).
    LITERAL => "'" P* "'"
String contants will be double-quoted. These are output with the quotes.
    STRING => "'" P* "'"


Indenting
    Using .indent() and .dedent() compiler directives (for c1.defn funcdefinition).
        More flexible than recognizing '{' or '}' at end of line.


For C, need to pop stack when the value of an expression is not used.  ####
    This occurs where an expression is a statement,
        and where expressions are used in 'for' statements.
    Solution:
        Expressions always leave result on stack.
        Insert pop instruction where needed to discard value.

2013-05-11

Renamed literals.{syntax, tokens} to constants.*, and 'literal' to 'constant' in specs,
    to avoid confusion with grammar and defn literals.

Use compiler directives for sbil 'const', 'pop', 'var', 'call', etc?
    How recognize them? Don't want to have to put them in defn spec.
Yikes, I'm getting sbil instructions confused with defn instructions!!


Tokenizer

    Do we want to use tokenkinds on the right side of a production in .tokens specs?
    Did I already prove that this was unnecessary?
        Just use a nonterm instead, and add "KINDNAME => nontermname".
    Easier for users without this restriction?   ###
    

2013-05-13

While generating sbil code, why not translate each instruction to LLVM?
    May do this eventually.
    For now, seems simpler to deal with one step at a time.
    Good excercise to use the compiler itself again.
    Syntax, token, and defn specs for sbil are good documentation; use them to verify them.
        Parser will verify correct sbil syntax, produce errors.
    




