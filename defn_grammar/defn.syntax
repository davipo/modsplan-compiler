# defn.syntax
# This is the syntax for .defn specifications.

# Copyright 2011-2013 by David H Post, DaviWorks.com.


defn_file.root => piece*

piece => endline
piece => definition

endline => COMMENT? NEWLINE

definition => signature endline instructions

signature => nonterm '(' child* ')'     # match a node with these children
signature => terminal '(' STRING ')'    # match when terminal text == string

child => nonterm
child => terminal

## Implement qualident later; may not need index
# nonterm => qualident index?
# qualident => identifier qualifier?
# qualifier => '_' subtype
# subtype => identifier
# index => INTEGER                      # to distinguish multiple instances

nonterm => identifier       ## simpler for now

identifier => LOWERNAME     # lowercase letters only

terminal => UPPERNAME       # uppercase letters and '_'


instructions => INDENT instruction+ DEDENT

instruction => endline
instruction => directive endline
instruction => expansion endline
instruction => rewrite endline
instruction => label ':' endline instructions?
instruction => operation endline

directive => '.' identifier '(' cargs? ')'      # compiler directive
expansion => '&' child                          # generate code for child node
rewrite => '=' signature

label => LOWERNAME

# compiler directive args
### Implement ',' qualifier, use "carg,*" above, eliminate next 2 lines
cargs => carg next_carg*
next_carg => ',' carg
carg => nonterm
carg => terminal
carg => constant

operation => identifier opargs?
### operation => identifier oparg,*


# operation args
opargs => oparg next_oparg*
next_oparg => ',' oparg
oparg => constant
oparg => label
oparg => terminal       # substitutes text of terminal
oparg => directive

constant => number
constant => STRING

number => INTEGER
