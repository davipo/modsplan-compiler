# defn.syntax
# This is the syntax for .defn specifications.

# Copyright 2011-2013 by David H Post, DaviWorks.com.


defn_file.root => piece*

piece => NEWLINE
piece => definition

definition => signature NEWLINE instructions

signature => nonterm '(' child* ')'     # match a node with these children
signature => terminal '(' STRING ')'    # match when terminal text == string

child => nonterm QUANTIFIER?
child => terminal QUANTIFIER?


## Implement qualident later; may not need index
# nonterm => qualident index?
# qualident => identifier qualifier?
# qualifier => '_' subtype
# subtype => identifier
# index => INTEGER                      # to distinguish multiple instances

nonterm => identifier       ## simpler for now

identifier => LOWERNAME     # lowercase letters only

terminal => UPPERNAME       # uppercase letters and '_'


instructions => INDENT NEWLINE? instruction+ NEWLINE* DEDENT

## instruction => NEWLINE
instruction => directive NEWLINE
instruction => expansion NEWLINE
instruction => rewrite NEWLINE
instruction => branch NEWLINE
instruction => label ':' NEWLINE instructions?
instruction => operation NEWLINE

directive => '.' identifier '(' carg,* ')'      # compiler directive
expansion => '&' child                          # generate code for child node
rewrite => '=' signature
branch => 'br' label,+

label => LOWERNAME

# compiler directive args
carg => child
# carg => nonterm
# carg => terminal
carg => constant

operation => opcode oparg,*

opcode => LOWERNAME         ## (note: opcode is unrelated to OPCODE)

# operation args
oparg => constant
oparg => terminal       # substitutes text of terminal
oparg => '&' nonterm    # substitutes first text in nonterm (like identifier name)
oparg => directive
oparg => name

name => LOWERNAME

constant => number
constant => STRING

number => INTEGER
